quarkus.log.level=${LOGLEVEL\:INFO}
#%dev.quarkus.log.console.color=true
%dev.quarkus.log.category."io.vertx.mqtt".level=${LOGLEVEL\:INFO}
%dev.quarkus.log.category."javax.net.ssl".level=${LOGLEVEL\:INFO}

quarkus.ssl.native=true

quarkus.native.enable-all-security-services=true

########## APP data ##########

#App data
qiot.folder.root=/var/data/qiot
qiot.folder.data=${qiot.folder.root}/data

qiot.datafile.path=${qiot.folder.data}/stationdata.json

#Truststore
qiot.mqtts.ts.path=${qiot.folder.data}/mqtts/client.ts
qiot.mqtts.ts.password=${TRUSTSTOREPASSWORD\:123456}

#Keystore
qiot.mqtts.ks.path=${qiot.folder.data}/mqtts/client.ks
qiot.mqtts.ks.password=${KEYSTOREPASSWORD\:123456}

%dev.qiot.station.serial=stationserial02
%dev.qiot.station.name=teststation02
%dev.qiot.station.address=viale john fitzgerald kennedy 2/D vibo valentia
qiot.station.serial=${STATIONSERIAL\:empty}
qiot.station.name=${STATIONNAME}
qiot.station.address=${STATIONADDRESS}

########## APP data ##########

# Rest client configuration properties
# using "configKey" instead of interface fully qualified name
#sensor - id
sensor-api/mp-rest/url=${SENSORSURL\:http\://localhost\:5000/} 
sensor-api/mp-rest/scope=javax.inject.Singleton

#quarkus.native.resources.includes=META-INF/resources/certs/client.ts,META-INF/resources/certs/client.ks
#quarkus.native.additional-build-args =-H:ResourceConfigurationFiles=resources-config.json,-H:ReflectionConfigurationFiles=reflection-config.json

%dev.registration-api/mp-rest/url=https://registration-service-qiotcovid19v2.apps.cluster-fcd8.fcd8.example.opentlc.com/
#registration-api/mp-rest/url=${REGISTRATION-SERVICE-URL\:https\://localhost:8443}
registration-api/mp-rest/keyStore=${qiot.folder.root}/https/client.ks
registration-api/mp-rest/keyStorePassword=123456
registration-api/mp-rest/trustStore=${qiot.folder.root}/https/client.ts
registration-api/mp-rest/trustStorePassword=123456
registration-api/mp-rest/scope=javax.inject.Singleton
%dev.registration-api/mp-rest/hostnameVerifier=io.quarkus.restclient.NoopHostnameVerifier
%staging.registration-api/mp-rest/hostnameVerifier=io.quarkus.restclient.NoopHostnameVerifier

nominatim-api/mp-rest/url=https://nominatim.openstreetmap.org
nominatim-api/mp-rest/scope=javax.inject.Singleton

########### Smallrye MQTT doesn't support mutual TLS, so we switch to Vert.x Mqtt client

qiot.mqtt.client.connection.generated-client-id=true
qiot.mqtt.client.connection.host=${MQTTURL\:endpoint-service-mqtts-0-svc-rte-qiotcovid19v2.apps.cluster-fcd8.fcd8.example.opentlc.com}
qiot.mqtt.client.connection.port=${MQTTPORT\:443}
#qiot.mqtt.client.connection.host=${MQTTURL\:localhost}
#qiot.mqtt.client.connection.port=${MQTTPORT\:1883}
qiot.mqtt.client.connection.ssl=${ENABLESSL\:true}
qiot.mqtt.client.connection.ssl.truststore.location=${qiot.mqtts.ts.path}
qiot.mqtt.client.connection.ssl.truststore.password=${qiot.mqtts.ts.password}
qiot.mqtt.client.connection.ssl.keystore.location=${qiot.mqtts.ks.path}
qiot.mqtt.client.connection.ssl.keystore.password=${qiot.mqtts.ks.password}

qiot.mqtt.client.topic.gas.topic=gas
qiot.mqtt.client.topic.gas.qos=2

qiot.mqtt.client.topic.pollution.topic=pollution
qiot.mqtt.client.topic.pollution.qos=2


## Configure the MQTT source (we write to it)
#### gas
#mp.messaging.outgoing.gas.type=smallrye-mqtt
#mp.messaging.outgoing.gas.qos=2
#mp.messaging.outgoing.gas.auto-generated-client-id=true
##mp.messaging.outgoing.gas.ssl=false
##mp.messaging.outgoing.gas.host=${MQTTURL\:localhost}
##mp.messaging.outgoing.gas.port=${MQTTPORT\:1883}
#
##%prod
#%prod.mp.messaging.outgoing.gas.host=${MQTTURL\:endpoint-service-mqtts-0-svc-rte-qiotcovid19v2.apps.cluster-fcd8.fcd8.example.opentlc.com}
#%prod.mp.messaging.outgoing.gas.port=${MQTTPORT\:443}
#%prod.mp.messaging.outgoing.gas.ssl=${ENABLESSL\:true}
#%prod.mp.messaging.outgoing.gas.trust-all=false
#%prod.mp.messaging.outgoing.gas.ssl.truststore.location=${qiot.mqtts.ts.path}
#%prod.mp.messaging.outgoing.gas.ssl.truststore.password=${qiot.mqtts.ts.password}
#%prod.mp.messaging.outgoing.gas.ssl.keystore.location=${qiot.mqtts.ks.path}
#%prod.mp.messaging.outgoing.gas.ssl.keystore.password=${qiot.mqtts.ks.password}
#
#
#### pollution
#mp.messaging.outgoing.pollution.type=smallrye-mqtt
#mp.messaging.outgoing.pollution.qos=2
#mp.messaging.outgoing.pollution.auto-generated-client-id=true
##mp.messaging.outgoing.pollution.ssl=false
##mp.messaging.outgoing.pollution.host=${MQTTURL\:localhost}
##mp.messaging.outgoing.pollution.port=${MQTTPORT\:1883}
#
##%prod
#%prod.mp.messaging.outgoing.pollution.host=${MQTTURL\:endpoint-service-mqtts-0-svc-rte-qiotcovid19v2.apps.cluster-fcd8.fcd8.example.opentlc.com}
#%prod.mp.messaging.outgoing.pollution.port=${MQTTPORT\:443}
#%prod.mp.messaging.outgoing.pollution.ssl=${ENABLESSL\:true}
#%prod.mp.messaging.outgoing.pollution.trust-all=false
#%prod.mp.messaging.outgoing.pollution.ssl.truststore.location=${qiot.mqtts.ts.path}
#%prod.mp.messaging.outgoing.pollution.ssl.truststore.password=${qiot.mqtts.ts.password}
#%prod.mp.messaging.outgoing.pollution.ssl.keystore.location=${qiot.mqtts.ks.path}
#%prod.mp.messaging.outgoing.pollution.ssl.keystore.password=${qiot.mqtts.ks.password}