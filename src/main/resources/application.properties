quarkus.log.level=${LOGLEVEL\:INFO}
quarkus.log.console.color=true
%dev.quarkus.log.category."io.smallrye".level=FINE
%dev.quarkus.log.category."io.netty".level=FINE
%dev.quarkus.log.category."javax.net.ssl".level=FINE


%prod.quarkus.http.port=${HTTPPORT\:8080}
%staging.quarkus.http.port=8080
%dev.quarkus.http.port=8080

# Rest client configuration properties
# using "configKey" instead of interface fully qualified name
#sensor - id
sensor-api/mp-rest/url=${SENSORSURL\:http\://localhost\:5000/} 
sensor-api/mp-rest/scope=javax.inject.Singleton

registration-api/mp-rest/url=${REGISTRATION-SERVICE-URL\:http\://localhost:10001} 
registration-api/mp-rest/scope=javax.inject.Singleton

nominatim-api/mp-rest/url=https://nominatim.openstreetmap.org
nominatim-api/mp-rest/scope=javax.inject.Singleton

# App related properties
%dev.app.station.serial=stationserial01
%dev.app.station.name=teststation01
%dev.app.station.address=viale john fitzgerald kennedy 2/D vibo valentia
app.station.serial=${STATIONSERIAL}
app.station.name=${STATIONNAME}
app.station.address=${STATIONADDRESS}
#The frequency (in seconds) 
app.telemetry.frequency=${FREQUENCY\:10}
%dev.app.datafile.path=/var/data/qiot/stationdata.json
%staging.app.datafile.path=/var/data/qiot/stationdata.json
%prod.app.datafile.path=/var/data/qiot/stationdata.json
%dev.app.certificate.path=/var/data/qiot/client.ts
%staging.app.certificate.path=/var/data/qiot/client.ts
%prod.app.certificate.path=/var/data/qiot/client.ts

# Configure the MQTT source (we write to it)
# gas
mp.messaging.outgoing.gas.type=smallrye-mqtt
mp.messaging.outgoing.gas.host=${MQTTURL\:qiot-broker-mqtts-0-svc-rte-qiot.apps.cluster-emeaiot-d864.emeaiot-d864.example.opentlc.com}
mp.messaging.outgoing.gas.port=${MQTTPORT\:443}
# https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2/mqtt/mqtt.html#mqtt-outbound
# https://vertx.io/docs/vertx-mqtt/java/#_vert_x_mqtt_client
mp.messaging.outgoing.gas.qos=2
%staging.mp.messaging.outgoing.gas.username=quarkus
%staging.mp.messaging.outgoing.gas.password=quarkus
mp.messaging.outgoing.gas.auto-generated-client-id=true
mp.messaging.outgoing.gas.ssl=${ENABLESSL\:true}
mp.messaging.outgoing.gas.trust-all=true
%dev.mp.messaging.outgoing.gas.ssl.truststore.location=client.ts
%staging.mp.messaging.outgoing.gas.ssl.truststore.location=/var/data/qiot/client.ts
%prod.mp.messaging.outgoing.gas.ssl.truststore.location=/var/data/qiot/client.ts
mp.messaging.outgoing.gas.ssl.truststore.password=${CERTPASS\:123456}
# pollution
mp.messaging.outgoing.pollution.type=smallrye-mqtt
mp.messaging.outgoing.pollution.host=${MQTTURL\:qiot-broker-mqtts-0-svc-rte-qiot.apps.cluster-emeaiot-d864.emeaiot-d864.example.opentlc.com}
mp.messaging.outgoing.pollution.port=${MQTTPORT\:443}
# https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2/mqtt/mqtt.html#mqtt-outbound
# https://vertx.io/docs/vertx-mqtt/java/#_vert_x_mqtt_client
mp.messaging.outgoing.pollution.qos=2
%staging.mp.messaging.outgoing.pollution.username=quarkus
%staging.mp.messaging.outgoing.pollution.password=quarkus
mp.messaging.outgoing.pollution.auto-generated-client-id=true
mp.messaging.outgoing.pollution.ssl=${ENABLESSL\:true}
mp.messaging.outgoing.pollution.trust-all=true
%dev.mp.messaging.outgoing.pollution.ssl.truststore.location=client.ts
%staging.mp.messaging.outgoing.pollution.ssl.truststore.location=/var/data/qiot/client.ts
%prod.mp.messaging.outgoing.pollution.ssl.truststore.location=/var/data/qiot/client.ts
mp.messaging.outgoing.pollution.ssl.truststore.password=${CERTPASS\:123456}